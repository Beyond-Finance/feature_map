# typed: strict
# frozen_string_literal: true

module FeatureMap
  module Private
    #
    # This class is responsible for turning FeatureMap directives (e.g. annotations, directory assignments, etc)
    # into a metrics.yml file, that can be used as an input to a variety of engineering team utilities (e.g.
    # PR/release announcements, documentation generation, etc).
    #
    class TestCoverageFile
      extend T::Sig

      class FileContentError < StandardError; end

      FEATURES_KEY = 'features'

      FeatureName = T.type_alias { String }
      CoverageStat = T.type_alias { String }

      FeatureCoverage = T.type_alias do
        T::Hash[
          CoverageStat,
          Integer
        ]
      end

      FeaturesContent = T.type_alias do
        T::Hash[
          FeatureName,
          FeatureCoverage
        ]
      end

      sig { params(coverage_stats: CodeCov::TestCoverageStats).void }
      def self.write!(coverage_stats)
        FileUtils.mkdir_p(path.dirname) if !path.dirname.exist?

        path.write([header_comment, "\n", generate_content(coverage_stats).to_yaml].join)
      end

      sig { returns(Pathname) }
      def self.path
        Pathname.pwd.join('.feature_map/test-coverage.yml')
      end

      sig { returns(String) }
      def self.header_comment
        <<~HEADER
          # STOP! - DO NOT EDIT THIS FILE MANUALLY
          # This file was automatically generated by "bin/featuremap test_coverage". The next time this file
          # is generated any changes will be lost. For more details:
          # https://github.com/Beyond-Finance/feature_map
          #
          # It is NOT recommended to commit this file into your source control. It will change or become
          # outdated frequently. Instead it should be regenerated when test coverage statistics are required.
          # This file should be ignored by your source control, allowing the local copy to be used for other
          # feature analysis operations (e.g. documentation generation, etc).
        HEADER
      end

      sig { params(coverage_stats: CodeCov::TestCoverageStats).returns(T::Hash[String, FeaturesContent]) }
      def self.generate_content(coverage_stats)
        feature_test_coverage = T.let({}, FeaturesContent)

        Private.feature_file_assignments.each do |feature_name, files|
          feature_test_coverage[feature_name] = T.let({ 'lines' => 0, 'hits' => 0, 'misses' => 0 }, FeatureCoverage)

          files.each_with_object(T.must(feature_test_coverage[feature_name])) do |file_path, coverage|
            next unless coverage_stats[file_path]

            coverage['lines'] = T.must(coverage['lines']) + (T.must(coverage_stats[file_path])['lines'] || 0)
            coverage['hits'] = T.must(coverage['hits']) + (T.must(coverage_stats[file_path])['hits'] || 0)
            coverage['misses'] = T.must(coverage['misses']) + (T.must(coverage_stats[file_path])['misses'] || 0)

            coverage
          end
        end

        { FEATURES_KEY => feature_test_coverage }
      end

      sig { returns(FeaturesContent) }
      def self.load_features!
        test_coverage_content = YAML.load_file(path)

        return test_coverage_content[FEATURES_KEY] if test_coverage_content.is_a?(Hash) && test_coverage_content[FEATURES_KEY]

        raise FileContentError, "Unexpected content found in #{path}. Use `bin/featuremap test_coverage` to regenerate it and try again."
      rescue Psych::SyntaxError => e
        raise FileContentError, "Invalid YAML content found at #{path}. Error: #{e.message} Use `bin/featuremap test_coverage` to generate it and try again."
      rescue Errno::ENOENT
        raise FileContentError, "No feature metrics file found at #{path}. Use `bin/featuremap test_coverage` to generate it and try again."
      end
    end
  end
end
