# typed: strict
# frozen_string_literal: true

module FeatureMap
  module Private
    #
    # This class is responsible for turning FeatureMap directives (e.g. annotations, directory assignments, etc)
    # into a metrics.yml file, that can be used as an input to a variety of engineering team utilities (e.g.
    # PR/release announcements, documentation generation, etc).
    #
    class MetricsFile
      extend T::Sig

      FEATURES_KEY = 'features'

      FeatureName = T.type_alias { String }

      FileList = T.type_alias { T::Array[String] }

      FeatureFiles = T.type_alias do
        T::Hash[
          FeatureName,
          FileList
        ]
      end

      FeatureMetrics = T.type_alias do
        T::Hash[
          String,
          Integer
        ]
      end

      FeaturesContent = T.type_alias do
        T::Hash[
          FeatureName,
          FeatureMetrics
        ]
      end

      sig { void }
      def self.write!
        FileUtils.mkdir_p(path.dirname) if !path.dirname.exist?
        path.write(generate_contents_lines.join("\n"))
      end

      sig { returns(Pathname) }
      def self.path
        Pathname.pwd.join('.feature_map/metrics.yml')
      end

      sig { returns(T::Array[T.nilable(String)]) }
      def self.generate_contents_lines
        cache = Private.glob_cache.raw_cache_contents

        header = <<~HEADER
          # STOP! - DO NOT EDIT THIS FILE MANUALLY
          # This file was automatically generated by "bin/featuremap validate". The next time this file
          # is generated any changes will be lost. For more details:
          # https://github.com/Beyond-Finance/feature_map
          #
          # It is NOT recommended to commit this file into your source control. It will change as a
          # result of nearly all other source code changes. This file should be ignored by your source
          # control but can be used for other feature analysis operations (e.g. documentation
          # generation, etc).
        HEADER

        feature_files = T.let({}, FeatureFiles)
        feature_metrics = T.let({}, FeaturesContent)

        cache.each_value do |assignment_map_cache|
          assignment_map_cache.to_h.each do |path, feature|
            feature_files[feature.name] ||= T.let([], FileList)
            T.must(feature_files[feature.name]) << path
          end
        end

        feature_files.each do |feature_name, files|
          feature_metrics[feature_name] = FeatureMetricsCalculator.calculate_for_feature(files)
        end

        [
          *header.split("\n"),
          '', # For line between header and feature metrics lines
          *{ FEATURES_KEY => feature_metrics }.to_yaml.split("\n"),
          '' # For end-of-file newline
        ]
      end
    end
  end
end
