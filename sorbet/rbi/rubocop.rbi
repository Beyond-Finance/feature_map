# typed: true

# Tried generating this file using tapioca but it pulled in a lot of additional dependencies and complexity that
# caused errors in the Sorbet type check oputput.

# source://rubocop//lib/rubocop/version.rb#3
module RuboCop; end

# ProcessedSource contains objects which are generated by Parser
# and other information such as disabled lines for cops.
# It also provides a convenient way to access source lines.
#
# source://rubocop-ast//lib/rubocop/ast/processed_source.rb#10
class RuboCop::AST::ProcessedSource
  # @return [ProcessedSource] a new instance of ProcessedSource
  #
  # source://rubocop-ast//lib/rubocop/ast/processed_source.rb#28
  def initialize(source, ruby_version, path = T.unsafe(nil), parser_engine: T.unsafe(nil)); end

  # Returns the value of attribute ast.
  #
  # source://rubocop-ast//lib/rubocop/ast/processed_source.rb#20
  def ast; end
end

# source://rubocop//lib/rubocop/ast_aliases.rb#6
RuboCop::ProcessedSource = RuboCop::AST::ProcessedSource

# > ABC is .. a software size metric .. computed by counting the number
# > of assignments, branches and conditions for a section of code.
# > http://c2.com/cgi/wiki?AbcMetric
#
# We separate the *calculator* from the *cop* so that the calculation,
# the formula itself, is easier to test.
#
# source://rubocop//lib/rubocop/cop/metrics/utils/abc_size_calculator.rb#13
class RuboCop::Cop::Metrics::Utils::AbcSizeCalculator
  # include ::RuboCop::AST::Sexp
  # include ::RuboCop::Cop::Metrics::Utils::RepeatedAttributeDiscount
  # include ::RuboCop::Cop::Metrics::Utils::IteratingBlock
  # include ::RuboCop::Cop::Metrics::Utils::RepeatedCsendDiscount

  # @return [AbcSizeCalculator] a new instance of AbcSizeCalculator
  #
  # source://rubocop//lib/rubocop/cop/metrics/utils/repeated_attribute_discount.rb#30
  def initialize(node, discount_repeated_attributes: T.unsafe(nil)); end

  # source://rubocop//lib/rubocop/cop/metrics/utils/abc_size_calculator.rb#42
  def calculate; end
end

# source://rubocop//lib/rubocop/cop/metrics/utils/code_length_calculator.rb#L8
class RuboCop::Cop::Metrics::Utils::CodeLengthCalculator
  def initialize(node, processed_source, count_comments: T.unsafe(nil), foldable_types: T.unsafe(nil)); end
  def calculate; end
end
