# typed: false
# frozen_string_literal: true

require 'spec_helper'

module FeatureMap
  RSpec.describe Private::AdditionalMetricsFile do
    describe '.write!' do
      let(:metrics) do
        {
          'Foo' => {
            'abc_size' => 500.08,
            'cyclomatic_complexity' => 74,
            'lines_of_code' => 449,
            'todo_locations' => {},
            'complexity_ratio' => 6.0675675675675675,
            'encapsulation_ratio' => 0.015590200445434299
          }
        }
      end
      let(:test_coverage) do
        {
          'Foo' => {
            'coverage_ratio' => 90
          }
        }
      end
      let(:health_config) do
        {
          'components' => {
            'cyclomatic_complexity' => { 'weight' => 15, 'score_threshold' => 100, 'minimum_variance' => 10 },
            'encapsulation' => { 'weight' => 15, 'score_threshold' => 100, 'minimum_variance' => 10 },
            'test_coverage' => { 'weight' => 70, 'score_threshold' => 95 }
          }
        }
      end

      let(:expected_file) do
        <<~FEATURES
          # STOP! - DO NOT EDIT THIS FILE MANUALLY
          # This file was automatically generated by "bin/featuremap additional_metrics". The next time this file
          # is generated any changes will be lost. For more details:
          # https://github.com/Beyond-Finance/feature_map
          #
          # It is NOT recommended to commit this file into your source control. It will change as a
          # result of nearly all other source code changes. This file should be ignored by your source
          # control but can be used for other feature analysis operations (e.g. documentation
          # generation, etc).

          ---
          features:
            Bar:
              cyclomatic_complexity:
                percentile: 0.0
                percent_of_max: 0
                score: 0
              encapsulation:
                percentile: 0.0
                percent_of_max: 0
                score: 0
              feature_size:
                percentile: 0.0
                percent_of_max: 0
                score: 0
              test_coverage:
                percentile: 0.0
                percent_of_max: 0
                score: 0
              health:
                test_coverage_component:
                  awardable_points: 70
                  health_score: 0.0
                  close_to_maximum_score: false
                  exceeds_score_threshold: false
                cyclomatic_complexity_component:
                  awardable_points: 15
                  health_score: 0.0
                  close_to_maximum_score: false
                  exceeds_score_threshold: false
                encapsulation_component:
                  awardable_points: 15
                  health_score: 0.0
                  close_to_maximum_score: false
                  exceeds_score_threshold: false
                overall: 0.0
            Foo:
              cyclomatic_complexity:
                percentile: 50.0
                percent_of_max: 100
                score: 6.0675675675675675
              encapsulation:
                percentile: 50.0
                percent_of_max: 100
                score: 0.015590200445434299
              feature_size:
                percentile: 50.0
                percent_of_max: 100
                score: 449
              test_coverage:
                percentile: 50.0
                percent_of_max: 100
                score: 90
              health:
                test_coverage_component:
                  awardable_points: 70
                  health_score: 66.3157894736842
                  close_to_maximum_score: false
                  exceeds_score_threshold: false
                cyclomatic_complexity_component:
                  awardable_points: 15
                  health_score: 15
                  close_to_maximum_score: true
                  exceeds_score_threshold: false
                encapsulation_component:
                  awardable_points: 15
                  health_score: 15
                  close_to_maximum_score: true
                  exceeds_score_threshold: false
                overall: 96.3157894736842
        FEATURES
      end

      before do
        # Must use the skip_features_validation to avoid having the GlobCache loaded from the stub assignments.yml file.
        write_configuration('skip_features_validation' => true)
        create_files_with_defined_classes
      end

      context 'when NO additional-metrics.yml file exists' do
        it 'creates the additional-metrics.yml file with new metrics data' do
          expect(File.exist?(Private::AdditionalMetricsFile.path)).to be_falsey
          Private::AdditionalMetricsFile.write!(metrics, test_coverage, health_config)
          expect(File.read(Private::AdditionalMetricsFile.path)).to eq(expected_file)
        end
      end

      context 'an existing additional-metrics.yml file exists' do
        before do
          write_file('.feature_map/additional-metrics.yml', <<~CONTENTS)
            # Placeholder to be removed by test.
            ---
            foo: 123
          CONTENTS
        end

        it 'overwrites the additional-metrics.yml file with new metrics data' do
          expect(File.read(Private::AdditionalMetricsFile.path)).not_to eq(expected_file)
          Private::AdditionalMetricsFile.write!(metrics, test_coverage, health_config)
          expect(File.read(Private::AdditionalMetricsFile.path)).to eq(expected_file)
        end
      end
    end

    describe '.path' do
      it 'returns the path to the additional-metrics.yml file' do
        expect(Private::AdditionalMetricsFile.path.to_s).to match(%r{/[a-zA-Z0-9-/]+/.feature_map/additional-metrics\.yml})
      end
    end

    describe '.load_features!' do
      before { create_additional_metrics_artifacts }

      it 'returns the feature metrics details from the existing Metrics File' do
        features = {
          'Bar' =>
          { 'cyclomatic_complexity' => { 'percentile' => 0.0, 'percent_of_max' => 0, 'score' => 0 },
            'encapsulation' => { 'percentile' => 0.0, 'percent_of_max' => 0, 'score' => 0 },
            'feature_size' => { 'percentile' => 0.0, 'percent_of_max' => 0, 'score' => 0 },
            'test_coverage' => { 'percentile' => 0.0, 'percent_of_max' => 0, 'score' => 0 },
            'health' =>
            { 'test_coverage_component' => { 'awardable_points' => 70, 'health_score' => 0.0, 'close_to_maximum_score' => false, 'exceeds_score_threshold' => false },
              'cyclomatic_complexity_component' => { 'awardable_points' => 15, 'health_score' => 0.0, 'close_to_maximum_score' => false, 'exceeds_score_threshold' => false },
              'encapsulation_component' => { 'awardable_points' => 15, 'health_score' => 0.0, 'close_to_maximum_score' => false, 'exceeds_score_threshold' => false },
              'overall' => 0.0 } },
          'Foo' =>
          { 'cyclomatic_complexity' => { 'percentile' => 50.0, 'percent_of_max' => 100, 'score' => 6.0675675675675675 },
            'encapsulation' => { 'percentile' => 50.0, 'percent_of_max' => 100, 'score' => 0.015590200445434299 },
            'feature_size' => { 'percentile' => 50.0, 'percent_of_max' => 100, 'score' => 449 },
            'test_coverage' => { 'percentile' => 50.0, 'percent_of_max' => 100, 'score' => 90 },
            'health' =>
            { 'test_coverage_component' =>
              { 'awardable_points' => 70, 'health_score' => 66.3157894736842, 'close_to_maximum_score' => false, 'exceeds_score_threshold' => false },
              'cyclomatic_complexity_component' => { 'awardable_points' => 15, 'health_score' => 15, 'close_to_maximum_score' => true, 'exceeds_score_threshold' => false },
              'encapsulation_component' => { 'awardable_points' => 15, 'health_score' => 15, 'close_to_maximum_score' => true, 'exceeds_score_threshold' => false },
              'overall' => 96.3157894736842 } }
        }

        expect(Private::AdditionalMetricsFile.load_features!).to eq(features)
      end

      it 'raises an error if the file does not contain any features content' do
        write_file('.feature_map/additional-metrics.yml', <<~CONTENTS)
          ---
          files:
            spec/wherever:
              cyclomatic_complexity: 1.2
              encapsulation: 0.8
              feature_size: 100
              test_coverage: 0.9
              health: 0.85
        CONTENTS

        expect { Private::AdditionalMetricsFile.load_features! }.to raise_error(Private::AdditionalMetricsFile::FileContentError, /Unexpected content found/i)
      end

      it 'raises an error if the file does not contain an object' do
        write_file('.feature_map/additional-metrics.yml', 'Test 1234')

        expect { Private::AdditionalMetricsFile.load_features! }.to raise_error(Private::AdditionalMetricsFile::FileContentError, /Unexpected content found/i)
      end

      it 'raises an error if the file contains invalid YAML' do
        write_file('.feature_map/additional-metrics.yml', <<~CONTENTS)
              ---
          features:
            Foo:
              cyclomatic_complexity: 1.2
                encapsulation: 0.8
              feature_size: 100
              test_coverage: 0.9
                  health: 0.85
        CONTENTS

        expect { Private::AdditionalMetricsFile.load_features! }.to raise_error(Private::AdditionalMetricsFile::FileContentError, /Invalid YAML content/i)
      end

      it 'raises an error if the file is not found' do
        File.delete('.feature_map/additional-metrics.yml')

        expect { Private::AdditionalMetricsFile.load_features! }.to raise_error(Private::AdditionalMetricsFile::FileContentError, /No feature metrics file found/i)
      end
    end
  end
end
