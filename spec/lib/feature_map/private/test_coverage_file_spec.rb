# typed: false
# frozen_string_literal: true

require 'spec_helper'

module FeatureMap
  RSpec.describe Private::TestCoverageFile do
    describe '.write!' do
      let(:coverage_stats) do
        {
          'app/my_error.rb' => { 'lines' => 10, 'hits' => 8, 'misses' => 2 },
          'app/my_file.rb' => { 'lines' => 9, 'hits' => 3, 'misses' => 6 },
          'app/bar/another_file.rb' => { 'lines' => 3, 'hits' => 2, 'misses' => 1 }
        }
      end
      let(:expected_file) do
        <<~FEATURES
          # STOP! - DO NOT EDIT THIS FILE MANUALLY
          # This file was automatically generated by "bin/featuremap test_coverage". The next time this file
          # is generated any changes will be lost. For more details:
          # https://github.com/Beyond-Finance/feature_map
          #
          # It is NOT recommended to commit this file into your source control. It will change or become
          # outdated frequently. Instead it should be regenerated when test coverage statistics are required.
          # This file should be ignored by your source control, allowing the local copy to be used for other
          # feature analysis operations (e.g. documentation generation, etc).

          ---
          features:
            Bar:
              lines: 13
              hits: 10
              misses: 3
            Foo:
              lines: 9
              hits: 3
              misses: 6
            Empty Feature:
              lines: 0
              hits: 0
              misses: 0
        FEATURES
      end

      before do
        # Must use the skip_features_validation to avoid having the GlobCache loaded from the stub assignments.yml file.
        write_configuration('skip_features_validation' => true)
        create_files_with_defined_classes
        write_file('.feature_map/definitions/empty.yml', <<~CONTENTS)
          name: Empty Feature
        CONTENTS
        write_file('app/bar/another_file.rb', <<~CONTENTS)
          # @feature Bar
        CONTENTS
      end

      context 'when NO test-coverage.yml file exists' do
        it 'overwrites the test-coverage.yml file with a new set of feature assignment' do
          expect(File.exist?(Private::TestCoverageFile.path)).to be_falsey
          Private::TestCoverageFile.write!(coverage_stats)
          expect(File.read(Private::TestCoverageFile.path)).to eq(expected_file)
        end
      end

      context 'an existing test-coverage.yml file exists' do
        before do
          write_file('.feature_map/test-coverage.yml', <<~CONTENTS)
            # Placeholder to be removed by test.
            ---
            foo: 123
          CONTENTS
        end

        it 'overwrites the test-coverage.yml file with a new set of feature assignment' do
          expect(File.read(Private::TestCoverageFile.path)).not_to eq(expected_file)
          Private::TestCoverageFile.write!(coverage_stats)
          expect(File.read(Private::TestCoverageFile.path)).to eq(expected_file)
        end
      end
    end

    describe '.path' do
      it 'returns the path to the test-coverage.yml file' do
        # Expects path to be something like: /private/var/folders/6d/.../test-coverage.yml
        expect(Private::TestCoverageFile.path.to_s).to match(%r{/[a-zA-Z0-9-/]+/.feature_map/test-coverage\.yml})
      end
    end

    describe '.load_features!' do
      before { create_test_coverage_artifacts }

      it 'returns the feature metrics details from the existing Metrics File' do
        expect(Private::TestCoverageFile.load_features!).to eq({
                                                                 'Bar' => {
                                                                   'lines' => 56,
                                                                   'hits' => 48,
                                                                   'misses' => 6
                                                                 }
                                                               })
      end

      it 'raises an error if the file does not contain any features content' do
        write_file('.feature_map/test-coverage.yml', <<~CONTENTS)
          ---
          files:
            app/lib/foo.rb:
              lines: 13
              hits: 10
              misses: 3
        CONTENTS

        expect { Private::TestCoverageFile.load_features! }.to raise_error(Private::TestCoverageFile::FileContentError, /Unexpected content found/i)
      end

      it 'raises an error if the file does not contain an object' do
        write_file('.feature_map/test-coverage.yml', 'Test 1234')

        expect { Private::TestCoverageFile.load_features! }.to raise_error(Private::TestCoverageFile::FileContentError, /Unexpected content found/i)
      end

      it 'raises an error if the file contains invalid YAML' do
        write_file('.feature_map/test-coverage.yml', <<~CONTENTS)
              ---
          features:
            Bar:
                lines: 56
              hits: 48
              misses: 6
        CONTENTS

        expect { Private::TestCoverageFile.load_features! }.to raise_error(Private::TestCoverageFile::FileContentError, /Invalid YAML content/i)
      end

      it 'raises an error if the file is not found' do
        File.delete('.feature_map/test-coverage.yml')

        expect { Private::TestCoverageFile.load_features! }.to raise_error(Private::TestCoverageFile::FileContentError, /No feature test coverage file found/i)
      end
    end
  end
end
