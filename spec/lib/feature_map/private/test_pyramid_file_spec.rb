# @feature Testing Tools
# frozen_string_literal: true

require 'spec_helper'

module FeatureMap
  RSpec.describe Private::TestPyramidFile do
    describe '.write!' do
      let(:unit_examples) do
        [
          { 'id' => './spec/my_file_spec.rb[1:1:1]', 'status' => 'passed' },
          { 'id' => './spec/my_file_spec.rb[1:1:2]', 'status' => 'passed' },
          { 'id' => './spec/my_file_spec.rb[1:1:3]', 'status' => 'pending' },
          { 'id' => './spec/models/foo_spec.rb[1:1:1]', 'status' => 'passed' },
          { 'id' => './spec/models/foo_spec.rb[1:1:2]', 'status' => 'pending' },
          { 'id' => './spec/bar/another_file_spec.rb[1:1:1]', 'status' => 'passed' },
          { 'id' => './spec/bar/another_file_spec.rb[1:1:2]', 'status' => 'pending' }
        ]
      end
      let(:integration_examples) do
        [
          { 'id' => './spec/integration/bar_integration_spec.rb[1:1:1]', 'status' => 'passed' },
          { 'id' => './spec/integration/bar_integration_spec.rb[1:1:2]', 'status' => 'pending' },
          { 'id' => './spec/integration/another_bar_integration_spec.rb[1:1:1]', 'status' => 'pending' }
        ]
      end
      let(:regression_examples) do
        [
          { 'id' => './spec/ui/foo_user_flow_spec.rb[1:1:1]', 'status' => 'passed' },
          { 'id' => './spec/ui/foo_user_flow_spec.rb[1:1:2]', 'status' => 'pending' },
          { 'id' => './spec/ui/bar_user_spec.rb[1:1:1]', 'status' => 'passed' },
          { 'id' => './spec/ui/bar_user_spec.rb[1:1:2]', 'status' => 'passed' }
        ]
      end
      let(:regression_assignments) do
        {
          'features' => {
            'Foo' => {
              'files' => [
                'spec/ui/foo_user_flow_spec.rb'
              ]
            },
            'Bar' => {
              'files' => [
                'spec/ui/bar_user_spec.rb'
              ]
            }
          }
        }
      end

      let(:expected_file) do
        <<~FEATURES
          # STOP! - DO NOT EDIT THIS FILE MANUALLY
          # This file was automatically generated by "bin/featuremap test_pyramid". The next time this file
          # is generated any changes will be lost. For more details:
          # https://github.com/Beyond-Finance/feature_map
          #
          # It is NOT recommended to commit this file into your source control. It will change or become
          # outdated frequently. Instead it should be regenerated when test pyramid statistics are required.
          # This file should be ignored by your source control, allowing the local copy to be used for other
          # feature analysis operations (e.g. documentation generation, etc).

          ---
          features:
            Empty Feature:
              unit_count: 0
              unit_pending: 0
              integration_count: 0
              integration_pending: 0
              regression_count: 0
              regression_pending: 0
            Foo:
              unit_count: 3
              unit_pending: 2
              integration_count: 0
              integration_pending: 0
              regression_count: 1
              regression_pending: 1
            Bar:
              unit_count: 1
              unit_pending: 1
              integration_count: 1
              integration_pending: 1
              regression_count: 2
              regression_pending: 0
        FEATURES
      end

      before do
        # Must use the skip_features_validation to avoid having the GlobCache loaded from the stub assignments.yml file.
        write_configuration('skip_features_validation' => true)
        create_files_with_defined_classes
        write_file('.feature_map/definitions/empty.yml', <<~CONTENTS)
          name: Empty Feature
        CONTENTS
        write_file('app/models/foo.rb', <<~CONTENTS)
          # @feature Foo
        CONTENTS
        write_file('app/bar/another_file.rb', <<~CONTENTS)
          # @feature Bar
        CONTENTS
        write_file('spec/integration/bar_integration_spec.rb', <<~CONTENTS)
          # @feature Bar
        CONTENTS
        write_file('spec/integration/bar_another_integration_spec.rb', <<~CONTENTS)
          # @feature Bar
        CONTENTS
      end

      context 'when NO test-pyramid.yml file exists' do
        it 'overwrites the test-pyramid.yml file with new test pyramid data' do
          expect(File.exist?(Private::TestPyramidFile.path)).to be_falsey
          Private::TestPyramidFile.write!(unit_examples, integration_examples, regression_examples, regression_assignments)
          expect(File.read(Private::TestPyramidFile.path)).to eq(expected_file)
        end
      end

      context 'an existing test-pyramid.yml file exists' do
        before do
          write_file('.feature_map/test-pyramid.yml', <<~CONTENTS)
            # Placeholder to be removed by test.
            ---
            foo: 123
          CONTENTS
        end

        it 'overwrites the test-pyramid.yml file with new test pyramid data' do
          expect(File.read(Private::TestPyramidFile.path)).not_to eq(expected_file)
          Private::TestPyramidFile.write!(unit_examples, integration_examples, regression_examples, regression_assignments)
          expect(File.read(Private::TestPyramidFile.path)).to eq(expected_file)
        end
      end
    end

    describe '.path' do
      it 'returns the path to the test-pyramid.yml file' do
        # Expects path to be something like: /private/var/folders/6d/.../test-pyramid.yml
        expect(Private::TestPyramidFile.path.to_s).to match(%r{/[a-zA-Z0-9-/]+/.feature_map/test-pyramid\.yml})
      end
    end

    describe '.load_features!' do
      before { create_test_pyramid_artifacts }

      it 'returns the feature metrics details from the existing Metrics File' do
        features = {
          'Bar' => {
            'unit_count' => 3,
            'unit_pending' => 2,
            'integration_count' => 0,
            'integration_pending' => 0,
            'regression_count' => 1,
            'regression_pending' => 1
          }
        }

        expect(Private::TestPyramidFile.load_features!).to eq(features)
      end

      it 'raises an error if the file does not contain any features content' do
        write_file('.feature_map/test-pyramid.yml', <<~CONTENTS)
          ---
          files:
            spec/wherever:
              unit_count: 3
              unit_pending: 2
              integration_count: 0
              integration_pending: 0
              regression_count: 1
              regression_pending: 1
        CONTENTS

        expect { Private::TestPyramidFile.load_features! }.to raise_error(Private::TestPyramidFile::FileContentError, /Unexpected content found/i)
      end

      it 'raises an error if the file does not contain an object' do
        write_file('.feature_map/test-pyramid.yml', 'Test 1234')

        expect { Private::TestPyramidFile.load_features! }.to raise_error(Private::TestPyramidFile::FileContentError, /Unexpected content found/i)
      end

      it 'raises an error if the file contains invalid YAML' do
        write_file('.feature_map/test-pyramid.yml', <<~CONTENTS)
              ---
          features:
            Bar:
              unit_count: 3
                unit_pending: 2
              integration_count: 0
              integration_pending: 0
                  regression_count: 1
              regression_pending: 1
        CONTENTS

        expect { Private::TestPyramidFile.load_features! }.to raise_error(Private::TestPyramidFile::FileContentError, /Invalid YAML content/i)
      end

      it 'raises an error if the file is not found' do
        File.delete('.feature_map/test-pyramid.yml')

        expect { Private::TestPyramidFile.load_features! }.to raise_error(Private::TestPyramidFile::FileContentError, /No feature test coverage file found/i)
      end
    end
  end
end
